...
    <!-- configuration for japanese text, using a morphological analyzer
      Most possibilities for customization are specified here in the schema.

      Note: you can set the default query operator to be OR, AND, or PHRASE:
       OR: Use these defaults (autoGeneratePhraseQueries="false", <solrQueryParser defaultOperator="OR"/>
           In this case Solr works like it does with the English language. The default query is OR,
           but documents that contain more of the query terms get a special boost. You can probably
           use a less aggressive stopwords/stoptags in this case, and its probably a good idea to use
           enablePositionIncrements=true, so that if a user puts a query in quotes, they get a much more
           exact phrase query.
       AND: Set autoGeneratePhraseQueries=false, but set <solrQueryParser defaultOperator="AND"/> in
           your schema.xml. Note if you do this, you should use a more aggressive stopwords/stoptags
           list (at least at query-time), otherwise a document might not match simply because it does
           not contain a prefix or particle. As in the above case, its probably a good idea to use
           enablePositionIncrements=true for explicit phrase queries from the user.
       PHRASE: Set autoGeneratePhraseQueries=true. If you do this, you should probably use both a very
           aggressive stopwords list, and you should probably also set enablePositionIncrements=false
           everywhere.  Otherwise, even documents that contain the query's phrase in exact order will
           not match because of slightly different grammatical structure.
    -->
    <fieldType name="text_ja_gosen" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false">
      <analyzer>
        <!-- map characters before the tokenizer:
             Optionally, instead of the GosenWidthFactory, you can choose to do the width
             mappings before the text is sent to the tokenizer.
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-japanese.txt"/>
        -->

        <!-- morphological tokenizer: sets the SURFACE form as the token, but also sets these attributes:
             BasicFormAttribute, ConjugationAttribute, PartOfSpeechAttribute, PronunciationsAttribute,
             ReadingsAttribute, and SentenceStartAttribute.
             Option setting
             compositePOS : merge multiple similar tokens by a part-of-speech based configrations
             dictionaryDir : specified a dictionary directory. you can use multiple dictionary for each tokenizer.
        -->
        <tokenizer class="solr.GosenTokenizerFactory" compositePOS="compositePOS.txt" dictionaryDir="dictionary/naist-chasen"/>

        <!-- normalizes CJK width differences:
             1. Folds fullwidth ASCII variants into the equivalent basic latin
             2. Folds halfwidth Katakana variants into the equivalent kana

             Note: alternatively you can use a MappingCharFilter before the tokenizer for this, but please note
             that mapping characters can change how Sen tokenizes text.
        -->
        <filter class="solr.GosenWidthFilterFactory"/>

        <!-- the punctuation filter removes all-punctuation tokens base on Unicode properties.
             punctuation tokens are tagged as "unknown", and its better to do this than to remove
             tokens with an unknown pos (as they might be valuable!). Because this punctuation
             usually signifies a phrase or sentence boundary, enablePositionIncrements can be
             used to prevent phrase queries from matching across natural phrase/sentence boundaries -->
        <filter class="solr.GosenPunctuationFilterFactory" enablePositionIncrements="true"/>

        <!-- this is a part-of-speech based stopfilter, it removes any tokens that have a certain
             of speech. you can set enablePositionIncrements for tighter phrase queries -->
        <filter class="solr.GosenPartOfSpeechStopFilterFactory" tags="stoptags_ja.txt" enablePositionIncrements="true"/>

        <!-- a standard stopfilter, to specify specific stopwords. -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_ja.txt" enablePositionIncrements="true"/>

        <!-- alternatively, instead of using a part-of-speech based stopfilter, you can use a
             part-of-speech based keepfilter: specifying only the parts of speech you wish to index.
             anything else will be removed. HOWEVER: this could be a little dangerous, because if
             we upgrade ipadic they might add some new tags (the tags are fairly specific), and suddenly
             things that you were indexing before are no longer being indexed. Its recommended to
             use the part-of-speech based stopfilter above if at all possible, for safety.
        <filter class="solr.GosenPartOfSpeechKeepFilterFactory" tags="keeptags_ja.txt" enablePositionIncrements="true"/>
        -->

        <!-- before any stemming/lemmatization, you can protect words from being modified by specifying
             a protwords.txt.
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords_ja.txt" ignoreCase="false"/>

             or you can also supply a custom stem dictionary for inflected forms (tab separated). No
             further stemming/lemmatization will modify this.
        <filter class="solr.StemmerOverrideFilterFactory" dictionary="dictionary.txt" ignoreCase="false"/>
        -->

        <!-- the basic form filter converts inflected verbs and adjectives to their dictionary citation form. -->
        <filter class="solr.GosenBasicFormFilterFactory"/>

        <!-- this filter heuristically normalizes katakana forms with a final prolonged sound mark -->
        <filter class="solr.GosenKatakanaStemFilterFactory"/>

        <!-- you might want to lowercase for any english text content you have -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
...
